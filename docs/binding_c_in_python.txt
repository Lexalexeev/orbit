Лутц: Программирование на Python. Том 2 (4-е издание)
Часть V. Инструменты и приемы
Глава 20. Интеграция Python/C
----------------------------------------------------------
C нацелен на скорость выполнения
Python на скорость разработки
Можно расширять Python классами, библеотеками, написанными на C,
а можно встраивать его в программы на С. Нас интересует первый случай.
Яркий пример: библиотека NumPy предназначенная для вычислительных задач.
Имеет идеологию схожую с Matlab и позволяет быстро и удобно оперировать 
векторами и матрицами.

Чтобы обеспечить возможность взаимодействия, как модули, так и типы C 
должны предоставить программный код «связующего слоя», который будет 
выполнять трансляцию вызовов и передавать данные между двумя языками. 
Этот слой регистрирует свои операции в  интерпретаторе Python в виде 
указателей на функции C. 

Модули и типы С могут компоноваться с Python статически (на этапе сборки) 
или динамически (при первом импортировании). 
Модули и типы С также ответственны за передачу сообщений об ошибках 
обратно в Python и за управление счетчиками ссылок сборщика мусора.

Модуль написанный на С состоит из 4-х частей.
1. функции модуля
2. таблица регистрации функций (имя, адрес, формат, документация)
3. структура, задающая модуль (имя, описание, размер, ссылка на таблицу методов)
4. функция инициализации модуля

пример:
/********************************************************************
* Простой модуль расширения на C для Python с именем "hello";
* скомпилируйте его в файл ".so" где-нибудь в пути поиска python,
* импортируйте и вызовите функцию hello.message;
********************************************************************/
#include <Python.h>
#include <string.h>
/* функции модуля */
static PyObject * /* возвращаемый объект */
message(PyObject *self, PyObject *args) /* self не использ. в модулях */
{ /* args – из Python */
	char *fromPython, result[1024];
	if (! PyArg_Parse(args, "(s)", &fromPython)) /* преобраз. Python -> C */
		return NULL; /* null=исключение */
	else 
	{
		strcpy(result, "Hello, "); /* создать строку C */
		strcat(result, fromPython); /* добавить строку из Python */
		return Py_BuildValue("s", result); /* преобразовать C -> Python */
	}
}
/* таблица регистрации */
static PyMethodDef hello_methods[] = {
	{"message", message, METH_VARARGS, "func doc"}, /* имя, адрес функции */
	/* формат, описание */
	{NULL, NULL, 0, NULL} /* признак конца таблицы */
};
/* структура определения модуля */
static struct PyModuleDef hellomodule = {
	PyModuleDef_HEAD_INIT,
	"hello", /* имя модуля */
	"mod doc", /* описание модуля, может быть NULL */
	-1, /* размер структуры для каждого экземпляра, -1=глоб. перем. */
	hello_methods /* ссылка на таблицу методов */
};
/* инициализация модуля */
PyMODINIT_FUNC
PyInit_hello() /* вызывается первой инструкцией импорта */
{ /* имя имеет значение при динамической загрузке */
	return PyModule_Create(&hellomodule);
}

Использование: собираем динамическую библиотеку (.dll или .so)
и помещаем ее в каталог, присутствующий в пути поиска модулей Python.
Теперь модуль можно импортировать в Python.

Что бы не писать кучу связующего кода есть 
SWIG(Simplifeied Wrapper and Interface Generator)

пишем обычную функцию на С

// hellolib.c
/*********************************************************************
* простой файл библиотеки на C с единственной функцией "message",
* которая предназначена для использования в программах Python.
* Здесь нет ничего, что говорило бы о Python, - эта функция на языке C
* может вызываться из программ на C, а также из Python
* (с помощью связующего программного кода).
*********************************************************************/
#include <string.h>

static char result[1024]; /* не экспортируется */

char * message(char *label) /* экспортируется */
{
	strcpy(result, "Hello, "); /* создать строку C */
	strcat(result, label); /* добавить label */
	return result; /* вернуть результат */
}

создадим заголовочный файл hellolib.h и объявим функцию внешней

// hellolib.h
/*************************************************************************
* Определяет имена, экспортируемые файлом hellolib.c в пространство имен C,
* а не программ Python - экспортируемые имена для последних определяются
* в таблице регистрации методов в программном коде модуля расширения
* Python, а не в этом файле .h;
*************************************************************************/
char *message(char *label);

теперь создадим файл для SWIG
// hellolib.i
/********************************************************************
* Файл описания модуля Swig для файла библиотеки на C.
* Создание расширения выполняется командой "swig -python hellolib.i".
*********************************************************************/
%module hellowrap // им модуля
%{ // код, добавляемый в файл оболочки
#include <hellolib.h>
%} 
extern char *message(char*);
/* или: %include hellolib.h, и испол. флаг -I arg */

после выполнения команды swig -python module_name.i получим файлы:
module_name.py и module_name_wrap.c из которого надо получить 
_module_name.dll или .so, т.к. module_name.py импортирует файл именно с 
таким именем.

// Makefile
PYINC = /usr/include/python3.4

_hellowrap.dll: hellolib_wrap.o hellolib.o
	gcc -shared hellolib_wrap.o hellolib.o -o $@

hellolib_wrap.o: hellolib_wrap.c hellolib.h
	gcc -fPIC hellolib_wrap.c -g -I$(PYINC) -c -o $@

hellolib_wrap.c: hellolib.i
	swig -python hellolib.i

hellolib.o: hellolib.c hellolib.h
	gcc hellolib.c -g -c -o hellolib.o -fpic
clean:
	rm -f *.dll *.o *.pyc core
force:
	rm -f *.dll *.o *.pyc core hellolib_wrap.c hellowrap.py

-----------------------------

Для классов аналогично необходимо прописывать связующий код, но 
swing делает это за нас и мы можем пользоваться написанными на С++ классами
так, будто они питоновские и писать для них свои подклассы.
SWIG так же поддерживает такие возможности С++ как шаблоны и перегрузка функций.

Пример:

// number.h
class Number
{
public:
	Number(int start); // конструктор
	~Number(); // деструктор
	void add(int value); // изменяет член data
	void sub(int value);
	int square(); // возвращает значение
	void display(); // выводит член data
	int data;
};

// number.cpp

/////////////////////////////////////////////////////////////////////
// реализация класса C++, который, возможно, будет использоваться
// из программного кода Python;
// предупреждение: обычно оба приема вывода, через cout и print,
// работают, но я столкнулся с проблемой при смешивании
// вывода C++/Python в Cygwin, которая была решена с помощью printf
/////////////////////////////////////////////////////////////////////

#include "number.h"
#include "stdio.h" // вместо #include "iostream.h"

Number::Number(int start) 
{
	data = start; // вывод из python поступает в stdout
	printf("Number: %d\n", data); // или: cout << "Number: " << data << endl;
}

Number::~Number() 
{
	printf("~Number: %d\n", data);
}

void Number::add(int value) 
{
	data += value;
	printf("add %d\n", value);
}

void Number::sub(int value) 
{
	data -= value;
	printf("sub %d\n", value);
}

int Number::square() 
{
	return data * data; // после вывода, fflush(stdout)
	// или cout << flush
}

void Number::display() 
{
	printf("Number=%d\n", data);
}
---------------------------
 файл для утилиты swig

 // number.i

 /****************************************************************
* Файл Swig с описанием модуля для обертывания класса C++.
* Генерация выполняется командой "swig -c++ -python number.i".
* Сгенерированный модуль C++ сохраняется в файле number_wrap.cxx;
* модуль 'number' ссылается на теневой класс в модуле number.py.
****************************************************************/
%module number
%{
#include "number.h"
%}

%include number.h
---------------------

// Makefile
PYINC = /usr/include/python3.4

_number.so: number_wrap.o number.o
	g++ -shared number_wrap.o number.o -o $@

number_wrap.o: number_wrap.cxx number.h
	g++ -fPIC number_wrap.cxx -g -I$(PYINC) -c -o $@

number_wrap.cxx: number.i
	swig -c++ -python number.i

number.o: number.cxx number.h
	g++ number.cxx -g -c -o number.o -fpic
clean:
	rm -f *.so *.o *.pyc core
force:
	rm -f *.so *.o *.pyc core number_wrap.c number.py

-------------------------------------

Может оказаться сложным собрать все это. Зато получаем действительно хорошую
обертку для работы на Python и потом больше не паримся.
---------------------

Альтернативы:
SIP - работает только для Python и  C/C++. Разрабатывался для создания PyQt
ctypes - модуль для Python, позволяющий обращаться к компилированным 
функциям в двоичных файлах библеотек. Никакой обертки на С/С++ не надо.
Возможна потеря скорости при машрутизации вызовов.
Boost.Python
Cython - несколько другой синтаксис, позволяющий замешивать в код на Python
и типы данных из С. Так же можно компилировать модули для Python,
но в расширении С.
distutils
weave 

---------------------------------------------
Модуль ctypes.
https://docs.python.org/3.4/library/ctypes.html

собираем динамическую библиотеку .dll или .so

в Python используем класс CDLL из модуля cpython
создаем объект CDLL("path_to_library")
и вызываем у него функции, реализованные в библиотеке

Плюсы: 
+ относительная простота использования

Минусы:
- программа может замедлиться из-за постоянного перенаправления вызова функций
- по умолчанию типы аргументов и выходного значения - int. Необходимо
для каждой функции прописывать необходимые типы.
- классы надо оборачивать
- все плохо с С++

Пример:

// hello.c
#include <string.h>

static char result[1024]; 

char * message(char *label)
{
	strcpy(result, "Hello, "); /* создать строку C */
	strcat(result, label); /* добавить label */
	return result; /* вернуть результат */
}

// test.py
import ctypes

message = ctypes.CDLL('./hello.so').message
message.restype = ctypes.c_char_p
message.argtypes = [ctypes.c_char_p]

message(b'Lanit summer school')

// Out:
b'Hello, Lanit summer school'

----------------------------------------------
SciPy.weave может выполнять код C/C++ внутри кода на Python 
и передавать ему аргументы. Например:
a = 'Hello world'
weave.inline("std::cout << a << std::endl;", ['a'])

Удобно использовать для простых вычислительных действий. 
Например, перемножить две матрицы. 
У нас, вероятно, будет что-то сложнее и это будет неудобно
и недостаточно.
---------------------------------------------
distutils - модуль из стандартной библиотеки Python, предназначенный для
расспространения пакетов Python. Но можно также в этом пакете сделать 
и модуль-расширение из .с файла. 
Пишется файл setup.py, в котором описывается пакет. По сути,
модуль не специализируется на создании библиотек написанных на C/C++
и способен обработать лишь файл с прописанным промежуточным слоем, что бы
импорт в Python был возможен. Т.е. возвращаемся к самому первому примеру.
---------------------------------------------
Boost.Python

Пример:

#include <boost/python.hpp>

using namespace boost::python;

struct World
{
    World(std::string msg_): msg(msg_) {}
    std::string greet() 
    { 
        return msg; 
    }
    std::string msg;
};

BOOST_PYTHON_MODULE(имя_модуля)
{
    class_<World>("World", init<std::string>())
        .def("greet", &World::greet)
    ;
}