# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.6
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_orbit', [dirname(__file__)])
        except ImportError:
            import _orbit
            return _orbit
        if fp is not None:
            try:
                _mod = imp.load_module('_orbit', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _orbit = swig_import_helper()
    del swig_import_helper
else:
    import _orbit
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _orbit.vec_x_set
    __swig_getmethods__["x"] = _orbit.vec_x_get
    if _newclass:
        x = _swig_property(_orbit.vec_x_get, _orbit.vec_x_set)
    __swig_setmethods__["y"] = _orbit.vec_y_set
    __swig_getmethods__["y"] = _orbit.vec_y_get
    if _newclass:
        y = _swig_property(_orbit.vec_y_get, _orbit.vec_y_set)
    __swig_setmethods__["z"] = _orbit.vec_z_set
    __swig_getmethods__["z"] = _orbit.vec_z_get
    if _newclass:
        z = _swig_property(_orbit.vec_z_get, _orbit.vec_z_set)

    def __init__(self):
        this = _orbit.new_vec()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _orbit.delete_vec
    __del__ = lambda self: None

vec_swigregister = _orbit.vec_swigregister
vec_swigregister(vec)

class Rotation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rotation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rotation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rotationAroundX"] = _orbit.Rotation_rotationAroundX_set
    __swig_getmethods__["rotationAroundX"] = _orbit.Rotation_rotationAroundX_get
    if _newclass:
        rotationAroundX = _swig_property(_orbit.Rotation_rotationAroundX_get, _orbit.Rotation_rotationAroundX_set)
    __swig_setmethods__["rotationAroundY"] = _orbit.Rotation_rotationAroundY_set
    __swig_getmethods__["rotationAroundY"] = _orbit.Rotation_rotationAroundY_get
    if _newclass:
        rotationAroundY = _swig_property(_orbit.Rotation_rotationAroundY_get, _orbit.Rotation_rotationAroundY_set)
    __swig_setmethods__["rotationAroundZ"] = _orbit.Rotation_rotationAroundZ_set
    __swig_getmethods__["rotationAroundZ"] = _orbit.Rotation_rotationAroundZ_get
    if _newclass:
        rotationAroundZ = _swig_property(_orbit.Rotation_rotationAroundZ_get, _orbit.Rotation_rotationAroundZ_set)

    def __init__(self):
        this = _orbit.new_Rotation()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _orbit.delete_Rotation
    __del__ = lambda self: None
Rotation_swigregister = _orbit.Rotation_swigregister
Rotation_swigregister(Rotation)

class ShipPosition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShipPosition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShipPosition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _orbit.ShipPosition_position_set
    __swig_getmethods__["position"] = _orbit.ShipPosition_position_get
    if _newclass:
        position = _swig_property(_orbit.ShipPosition_position_get, _orbit.ShipPosition_position_set)
    __swig_setmethods__["orientation"] = _orbit.ShipPosition_orientation_set
    __swig_getmethods__["orientation"] = _orbit.ShipPosition_orientation_get
    if _newclass:
        orientation = _swig_property(_orbit.ShipPosition_orientation_get, _orbit.ShipPosition_orientation_set)
    __swig_setmethods__["speedFirst"] = _orbit.ShipPosition_speedFirst_set
    __swig_getmethods__["speedFirst"] = _orbit.ShipPosition_speedFirst_get
    if _newclass:
        speedFirst = _swig_property(_orbit.ShipPosition_speedFirst_get, _orbit.ShipPosition_speedFirst_set)

    def __init__(self):
        this = _orbit.new_ShipPosition()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _orbit.delete_ShipPosition
    __del__ = lambda self: None
ShipPosition_swigregister = _orbit.ShipPosition_swigregister
ShipPosition_swigregister(ShipPosition)

class ShipParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShipParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShipParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["shipEdgeLength"] = _orbit.ShipParams_shipEdgeLength_set
    __swig_getmethods__["shipEdgeLength"] = _orbit.ShipParams_shipEdgeLength_get
    if _newclass:
        shipEdgeLength = _swig_property(_orbit.ShipParams_shipEdgeLength_get, _orbit.ShipParams_shipEdgeLength_set)
    __swig_setmethods__["shipMass"] = _orbit.ShipParams_shipMass_set
    __swig_getmethods__["shipMass"] = _orbit.ShipParams_shipMass_get
    if _newclass:
        shipMass = _swig_property(_orbit.ShipParams_shipMass_get, _orbit.ShipParams_shipMass_set)
    __swig_setmethods__["fuelMass"] = _orbit.ShipParams_fuelMass_set
    __swig_getmethods__["fuelMass"] = _orbit.ShipParams_fuelMass_get
    if _newclass:
        fuelMass = _swig_property(_orbit.ShipParams_fuelMass_get, _orbit.ShipParams_fuelMass_set)
    __swig_setmethods__["maxRotation"] = _orbit.ShipParams_maxRotation_set
    __swig_getmethods__["maxRotation"] = _orbit.ShipParams_maxRotation_get
    if _newclass:
        maxRotation = _swig_property(_orbit.ShipParams_maxRotation_get, _orbit.ShipParams_maxRotation_set)
    __swig_setmethods__["maxFuelUsagePerSec"] = _orbit.ShipParams_maxFuelUsagePerSec_set
    __swig_getmethods__["maxFuelUsagePerSec"] = _orbit.ShipParams_maxFuelUsagePerSec_get
    if _newclass:
        maxFuelUsagePerSec = _swig_property(_orbit.ShipParams_maxFuelUsagePerSec_get, _orbit.ShipParams_maxFuelUsagePerSec_set)
    __swig_setmethods__["impulsePerFuel"] = _orbit.ShipParams_impulsePerFuel_set
    __swig_getmethods__["impulsePerFuel"] = _orbit.ShipParams_impulsePerFuel_get
    if _newclass:
        impulsePerFuel = _swig_property(_orbit.ShipParams_impulsePerFuel_get, _orbit.ShipParams_impulsePerFuel_set)
    __swig_setmethods__["impulseFlightPlan"] = _orbit.ShipParams_impulseFlightPlan_set
    __swig_getmethods__["impulseFlightPlan"] = _orbit.ShipParams_impulseFlightPlan_get
    if _newclass:
        impulseFlightPlan = _swig_property(_orbit.ShipParams_impulseFlightPlan_get, _orbit.ShipParams_impulseFlightPlan_set)
    __swig_setmethods__["rotateFlightPlan"] = _orbit.ShipParams_rotateFlightPlan_set
    __swig_getmethods__["rotateFlightPlan"] = _orbit.ShipParams_rotateFlightPlan_get
    if _newclass:
        rotateFlightPlan = _swig_property(_orbit.ShipParams_rotateFlightPlan_get, _orbit.ShipParams_rotateFlightPlan_set)

    def __init__(self):
        this = _orbit.new_ShipParams()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _orbit.delete_ShipParams
    __del__ = lambda self: None
ShipParams_swigregister = _orbit.ShipParams_swigregister
ShipParams_swigregister(ShipParams)

class Quants(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quants, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quants, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numberOfQuants"] = _orbit.Quants_numberOfQuants_set
    __swig_getmethods__["numberOfQuants"] = _orbit.Quants_numberOfQuants_get
    if _newclass:
        numberOfQuants = _swig_property(_orbit.Quants_numberOfQuants_get, _orbit.Quants_numberOfQuants_set)
    __swig_setmethods__["quantSizeOfSec"] = _orbit.Quants_quantSizeOfSec_set
    __swig_getmethods__["quantSizeOfSec"] = _orbit.Quants_quantSizeOfSec_get
    if _newclass:
        quantSizeOfSec = _swig_property(_orbit.Quants_quantSizeOfSec_get, _orbit.Quants_quantSizeOfSec_set)

    def __init__(self):
        this = _orbit.new_Quants()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _orbit.delete_Quants
    __del__ = lambda self: None
Quants_swigregister = _orbit.Quants_swigregister
Quants_swigregister(Quants)


def computeFlightPlan(initialPosition, shipParams, quants):
    return _orbit.computeFlightPlan(initialPosition, shipParams, quants)
computeFlightPlan = _orbit.computeFlightPlan
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _orbit.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _orbit.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _orbit.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _orbit.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _orbit.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _orbit.SwigPyIterator_equal(self, x)

    def copy(self):
        return _orbit.SwigPyIterator_copy(self)

    def next(self):
        return _orbit.SwigPyIterator_next(self)

    def __next__(self):
        return _orbit.SwigPyIterator___next__(self)

    def previous(self):
        return _orbit.SwigPyIterator_previous(self)

    def advance(self, n):
        return _orbit.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _orbit.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _orbit.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _orbit.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _orbit.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _orbit.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _orbit.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _orbit.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vector_of_double(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_double, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_double, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _orbit.vector_of_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _orbit.vector_of_double___nonzero__(self)

    def __bool__(self):
        return _orbit.vector_of_double___bool__(self)

    def __len__(self):
        return _orbit.vector_of_double___len__(self)

    def pop(self):
        return _orbit.vector_of_double_pop(self)

    def __getslice__(self, i, j):
        return _orbit.vector_of_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _orbit.vector_of_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _orbit.vector_of_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _orbit.vector_of_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _orbit.vector_of_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _orbit.vector_of_double___setitem__(self, *args)

    def append(self, x):
        return _orbit.vector_of_double_append(self, x)

    def empty(self):
        return _orbit.vector_of_double_empty(self)

    def size(self):
        return _orbit.vector_of_double_size(self)

    def clear(self):
        return _orbit.vector_of_double_clear(self)

    def swap(self, v):
        return _orbit.vector_of_double_swap(self, v)

    def get_allocator(self):
        return _orbit.vector_of_double_get_allocator(self)

    def begin(self):
        return _orbit.vector_of_double_begin(self)

    def end(self):
        return _orbit.vector_of_double_end(self)

    def rbegin(self):
        return _orbit.vector_of_double_rbegin(self)

    def rend(self):
        return _orbit.vector_of_double_rend(self)

    def pop_back(self):
        return _orbit.vector_of_double_pop_back(self)

    def erase(self, *args):
        return _orbit.vector_of_double_erase(self, *args)

    def __init__(self, *args):
        this = _orbit.new_vector_of_double(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _orbit.vector_of_double_push_back(self, x)

    def front(self):
        return _orbit.vector_of_double_front(self)

    def back(self):
        return _orbit.vector_of_double_back(self)

    def assign(self, n, x):
        return _orbit.vector_of_double_assign(self, n, x)

    def resize(self, *args):
        return _orbit.vector_of_double_resize(self, *args)

    def insert(self, *args):
        return _orbit.vector_of_double_insert(self, *args)

    def reserve(self, n):
        return _orbit.vector_of_double_reserve(self, n)

    def capacity(self):
        return _orbit.vector_of_double_capacity(self)
    __swig_destroy__ = _orbit.delete_vector_of_double
    __del__ = lambda self: None
vector_of_double_swigregister = _orbit.vector_of_double_swigregister
vector_of_double_swigregister(vector_of_double)

class vector_of_rotation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_rotation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_rotation, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _orbit.vector_of_rotation_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _orbit.vector_of_rotation___nonzero__(self)

    def __bool__(self):
        return _orbit.vector_of_rotation___bool__(self)

    def __len__(self):
        return _orbit.vector_of_rotation___len__(self)

    def pop(self):
        return _orbit.vector_of_rotation_pop(self)

    def __getslice__(self, i, j):
        return _orbit.vector_of_rotation___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _orbit.vector_of_rotation___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _orbit.vector_of_rotation___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _orbit.vector_of_rotation___delitem__(self, *args)

    def __getitem__(self, *args):
        return _orbit.vector_of_rotation___getitem__(self, *args)

    def __setitem__(self, *args):
        return _orbit.vector_of_rotation___setitem__(self, *args)

    def append(self, x):
        return _orbit.vector_of_rotation_append(self, x)

    def empty(self):
        return _orbit.vector_of_rotation_empty(self)

    def size(self):
        return _orbit.vector_of_rotation_size(self)

    def clear(self):
        return _orbit.vector_of_rotation_clear(self)

    def swap(self, v):
        return _orbit.vector_of_rotation_swap(self, v)

    def get_allocator(self):
        return _orbit.vector_of_rotation_get_allocator(self)

    def begin(self):
        return _orbit.vector_of_rotation_begin(self)

    def end(self):
        return _orbit.vector_of_rotation_end(self)

    def rbegin(self):
        return _orbit.vector_of_rotation_rbegin(self)

    def rend(self):
        return _orbit.vector_of_rotation_rend(self)

    def pop_back(self):
        return _orbit.vector_of_rotation_pop_back(self)

    def erase(self, *args):
        return _orbit.vector_of_rotation_erase(self, *args)

    def __init__(self, *args):
        this = _orbit.new_vector_of_rotation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _orbit.vector_of_rotation_push_back(self, x)

    def front(self):
        return _orbit.vector_of_rotation_front(self)

    def back(self):
        return _orbit.vector_of_rotation_back(self)

    def assign(self, n, x):
        return _orbit.vector_of_rotation_assign(self, n, x)

    def resize(self, *args):
        return _orbit.vector_of_rotation_resize(self, *args)

    def insert(self, *args):
        return _orbit.vector_of_rotation_insert(self, *args)

    def reserve(self, n):
        return _orbit.vector_of_rotation_reserve(self, n)

    def capacity(self):
        return _orbit.vector_of_rotation_capacity(self)
    __swig_destroy__ = _orbit.delete_vector_of_rotation
    __del__ = lambda self: None
vector_of_rotation_swigregister = _orbit.vector_of_rotation_swigregister
vector_of_rotation_swigregister(vector_of_rotation)

class vector_of_position(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_of_position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_of_position, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _orbit.vector_of_position_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _orbit.vector_of_position___nonzero__(self)

    def __bool__(self):
        return _orbit.vector_of_position___bool__(self)

    def __len__(self):
        return _orbit.vector_of_position___len__(self)

    def pop(self):
        return _orbit.vector_of_position_pop(self)

    def __getslice__(self, i, j):
        return _orbit.vector_of_position___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _orbit.vector_of_position___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _orbit.vector_of_position___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _orbit.vector_of_position___delitem__(self, *args)

    def __getitem__(self, *args):
        return _orbit.vector_of_position___getitem__(self, *args)

    def __setitem__(self, *args):
        return _orbit.vector_of_position___setitem__(self, *args)

    def append(self, x):
        return _orbit.vector_of_position_append(self, x)

    def empty(self):
        return _orbit.vector_of_position_empty(self)

    def size(self):
        return _orbit.vector_of_position_size(self)

    def clear(self):
        return _orbit.vector_of_position_clear(self)

    def swap(self, v):
        return _orbit.vector_of_position_swap(self, v)

    def get_allocator(self):
        return _orbit.vector_of_position_get_allocator(self)

    def begin(self):
        return _orbit.vector_of_position_begin(self)

    def end(self):
        return _orbit.vector_of_position_end(self)

    def rbegin(self):
        return _orbit.vector_of_position_rbegin(self)

    def rend(self):
        return _orbit.vector_of_position_rend(self)

    def pop_back(self):
        return _orbit.vector_of_position_pop_back(self)

    def erase(self, *args):
        return _orbit.vector_of_position_erase(self, *args)

    def __init__(self, *args):
        this = _orbit.new_vector_of_position(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _orbit.vector_of_position_push_back(self, x)

    def front(self):
        return _orbit.vector_of_position_front(self)

    def back(self):
        return _orbit.vector_of_position_back(self)

    def assign(self, n, x):
        return _orbit.vector_of_position_assign(self, n, x)

    def resize(self, *args):
        return _orbit.vector_of_position_resize(self, *args)

    def insert(self, *args):
        return _orbit.vector_of_position_insert(self, *args)

    def reserve(self, n):
        return _orbit.vector_of_position_reserve(self, n)

    def capacity(self):
        return _orbit.vector_of_position_capacity(self)
    __swig_destroy__ = _orbit.delete_vector_of_position
    __del__ = lambda self: None
vector_of_position_swigregister = _orbit.vector_of_position_swigregister
vector_of_position_swigregister(vector_of_position)

# This file is compatible with both classic and new-style classes.


